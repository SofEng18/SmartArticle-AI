import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import { OpenAI } from "openai";

dotenv.config();

const app = express();
const port = process.env.PORT || 3002;

// Path to maintenance flag file
const maintenanceFlagPath = path.join(process.cwd(), "maintenance.flag");

// Initialize OpenAI client with API key from environment variable
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

app.use(cors());
app.use(express.json());

// Middleware to check maintenance mode
app.use((req, res, next) => {
  if (fs.existsSync(maintenanceFlagPath)) {
    // If maintenance.flag exists, block all requests except for a health check
    if (req.path === "/") {
      return next();
    }
    return res.status(503).json({
      error: "🛠️ الموقع تحت الصيانة حالياً، يرجى المحاولة لاحقاً.",
    });
  }
  next();
});

// Simple health check endpoint
app.get("/", (req, res) => {
  res.send("SmartArticle AI Server is running...");
});

/**
 * POST /generate
 * Request body: { topic: string, language: string, length: string }
 * Returns: streamed article content generated by OpenAI API
 */
app.post("/generate", async (req, res) => {
  try {
    const { topic, language, length } = req.body;

    if (!topic) {
      return res.status(400).json({ error: "Topic is required" });
    }

    // Prepare prompt based on inputs (can be customized)
    const prompt = `Please write a ${length} article in ${language} about: ${topic}`;

    // OpenAI API call with streaming enabled
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      stream: true,
    });

    // Set response headers for streaming text chunks
    res.setHeader("Content-Type", "text/event-stream");
    res.setHeader("Cache-Control", "no-cache");
    res.setHeader("Connection", "keep-alive");

    // Stream the chunks from OpenAI to client
    for await (const part of completion) {
      const content = part.choices[0]?.delta?.content;
      if (content) {
        res.write(content);
      }
    }
    res.end();
  } catch (error) {
    console.error("Error in /generate:", error);

    // Friendly maintenance message to users, no raw API error details
    res.status(500).json({
      error: "🛠️ الموقع تحت الصيانة حالياً، يرجى المحاولة لاحقاً.",
    });
  }
});

// Sitemap endpoint
app.get("/sitemap.xml", (req, res) => {
  const baseUrl = process.env.BASE_URL || `http://localhost:${port}`;
  const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>${baseUrl}/</loc>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
  <url>
    <loc>${baseUrl}/generate</loc>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>
  <url>
    <loc>${baseUrl}/pricing</loc>
    <changefreq>monthly</changefreq>
    <priority>0.5</priority>
  </url>
</urlset>`;

  res.header("Content-Type", "application/xml");
  res.send(sitemap);
});

app.listen(port, () => {
  console.log(`SmartArticle AI server listening at http://localhost:${port}`);
});
